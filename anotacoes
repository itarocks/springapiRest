/usr/libexec/java_home -V

/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home

export JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/home/bin'

export JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-12.0.2.jdk/Contents/Home/'

Setar o java home para o correto sdk man

export JAVA_HOME='/Users/itamarrocha/.sdkman/candidates/java/current'

Maven --> 
POM - Project Object Model 


executar o projeto empacotado-- 

java -jar target/{nome do jar} 

Clean --> 

Limpa os arquivos --> 

caminho projeto 

----------Class Loader
----------> 
O que é injeçao  de dependencia? 

Pq usar --> Baixo acoplamento

---> Inversao de controle 



2.10. Conhecendo o Ioc Container do Spring 
Bean --> objetos gerenciados pelo Container do Spring
2.11. Definindo beans com @Component
@Component

2.13
@Configuration
--> Definiçao de beans

Inicio 30/11/2020

Aulas 

1.1 - Introduçao 

1.3 Por que desenvolver REST APIs?
1.4. Conhecendo o modelo de domínio do projeto do curso

2.1. Por que aprender e usar Spring?
2.2. Conhecendo o ecossistema Spring
     Spring Boot --> Visao opinativa 
     Servelet Container --> Fetch Jar
     
2.3 Spring vs Jakarta 

JEE --> Baseado em especificaçoes 
	Agora gerenciado pelo eclipse foundation
Vendor Lock in --> 

Spring ou JEE? 
--> JEE, injeçao de dependecia --> CDI 

2.4 Conhecendo o spring Boot
	--> Spring nao gera codigo, ele apenas auto configura seus projetos
	
Spring Boot vs Spring MVC?

Boot -> camada de abstraçao para ajudar no desenvolvimento

2.5 Criando um projeto spring Boot com Spring Initializr

2.6. Conhecendo o Maven e o pom.xml de um projeto Spring Boot

Maven --> Ferramenta de gerenciamento de dependencia e build de projetos java

comand + K --> para limpar o terminal no mac

Como gerar o build do projeto? 

./mvnw package

./mvnw clean, limpar os arquivs da pasta target

Pom.xml? 

2.7 Criando um controller com Spring MVC

2.8 Restart mais rapido da aplicaçao com DevTools

2.9. O que é injeção de dependências?

principio de inversao de controle; 

IOC JAVA 

2.10. Conhecendo o IoC Container do Spring

BEAN --> Objetos gerenciados pelos Containers do Spring \

Apliccation Context 

2.11. Definindo beans com @Component

bootstrap --> 

2.12. Injetando dependências (beans Spring)

--> Uma das formas de fazer a injeçao de dependencia é pelo construtor

2.13. Usando @Configuration e @Bean para definir beans

Configuration --> classe NotificacaoConfig
Bean 

2.14. Conhecendo os pontos de injeção e a anotação @Autowired

Ponto de injeçoes 

1) Construtor 

2) Setters

3) No proprio atributo 

Qual usar? O ideal é usar no construtor; no atributo dificulta um pouco os testes 

2.15. Dependência opcional com @Autowired

@Autowired(required = false) 

2.16. Ambiguidade de beans e injeção de lista de beans

2.17. Desambiguação de beans com @Primary

@Primary --> 

2.18. Desambiguação de beans com @Qualifier

@Qualifier("email")

2.19. Desambiguação de beans com anotação customizada


@Retention --> 

2.20. Mudando o comportamento da aplicação com Spring Profiles
-- Uma forma de separar componentes da aplicaçao em diferentes ambientes
--Muito utilizado em ambiente de produçao e desenvolvimento

para passar o profile por linha de comando: 

java -jar projeto.jar -Dspring.profiles.actives=prod // tbem da pra fazer pela propria IDE do eclipse

2.21. Criando métodos de callback do ciclo de vida dos beans 

--> Todos os beans no spring possuem o ciclo de vida 
	1) Inicializaçao
	2) Utilizaçao
	3) Destruiçao
	
Podemos implementar metodos de callback --> sao chamados pelo proprio container quando passam por determinado ciclo de vida acima 

1) Com essa anotation

@PostConstruct

@PreDestroy 

Init
Destroy

2)Da pra fazer tbem pela classe de configuraçao

3) Implementando a interface InitializingBean e DisposableBean

2.22. Publicando e consumindo eventos customizados
Padrao de projeto --> Observer, diminui o acoplamento entre as classes 

ApplicattionEventPublisher 

Vantagens, baixo acoplamento e alta coesao 

2.23. Configurando projetos Spring Boot com o application.properties

Boa pratica, nunca usar hard-coded no código da aplicaçao 


#2.24. Substituindo propriedades via linha de comando e variáveis de ambiente

Como definir variavel de ambiente no MAC

1) export SERVER_PORT=8083
   echo $SERVER_PORT
   
No windows 

set SERVER_PORT= 8082

2.25. Criando e acessando propriedades customizadas com @Value

Classe NotificadorEmail

2.26. Acessando propriedades com @ConfigurationProperties

Forma de organizar as configuracoes de determinados grupos 

@ConfigurationProperties 
Criando a classe de configuraçao 

Classe NotificadorProperties

2.27. Alterando a configuração do projeto dependendo do ambiente (com Spring Profiles)

Properties especificos para cada ambiente 

2.28. Ativando o Spring Profile por linha de comando e variável de ambiente
Implantar no ambiente de produçao 

java -jar {pasta}arquivo.jar --spring.profiles.active=production

3. Introduçao ao JPA e Hibernate 
Persistencia de dados? 
Driver JDBC -> 
O que é o ORM? 

JPQL

3.2. O que é JPA e Hibernate? 
É uma especificaçao - descreve como algo deve funcionar 
Hibernate - é uma implementaçao da especificaçao JPA 

3.3. Adicionando JPA e configurando o Data Source

3.4. Mapeando entidades com JPA

3.5. Criando as tabelas do banco a partir das entidades

3.6. Mapeando o id da entidade para autoincremento

3.7. Importando dados de teste com import.sql

arquivo tem que estar dentro da pasta resource e precisa chamar -> import.sql

3.8. Consultando objetos do banco de dados

3.9. Adicionando um objeto no banco de dados
@Transactional 

3.10. Buscando um objeto pelo id no banco de dados

3.11. Atualizando um objeto no banco de dados


3.12. Excluindo um objeto do banco de dados

3.13. Conhecendo o padrão Aggregate do DDD

Agregatte root --> Ler mais nisso no livro do DDD


3.14. Conhecendo e implementando o padrão Repository -- refazer essa aula

Repositorio orientado a persitencia 

Ele representa uma coleçao 

3.15. Conhecendo e usando o Lombok

Lombok -->  

3.16. Desafio: Lombok e repositório de restaurantes

3.17. Mapeando relacionamento com @ManyToOne
Engine:MyISAM, correto é usar o INODB

3.18. A anotação @JoinColumn

3.19. Propriedade nullable de @Column e @JoinColumn

3.20. Desafio: mapeando entidades
Voltar e fazer o desafio; 
1)Criar a entidade, fazer o mapeamento, criar o repositorio de cada agregate root; 

4.0 Rest com spring 

O que é Rest? 

Representational State Transfer 

Melhores praticas sao chamadas de constraints 

Vantagens = 1.1 Separacao entre o cliente e servidor

4.2. Conhecendo as constraints do REST

. Cliente-Servidor
. Stateless --> sem estado 
. cache --> tipo um proxy 
. interface uniforme 
. Sistema em camadas(Ter outros servidores no meio do caminho) --> nao devem afetar o processamento da requisicao 
. Codigo sob demanda 

4.3. Diferença entre REST e RESTful

Restful API segue todas as constraints 

4.4. Desenvolvedores de REST APIs puristas e pragmáticos

Purista vs pragmaticos 

4.5. Conhecendo o protocolo HTTP

4.6. Usando o protocolo HTTP

4.7. Instalando e testando o Postman

4.8. Entendendo o que são Recursos REST

Recursos do Rest API 


4.9. Identificando recursos REST

Rest usa URI: Uniform Resource Identifier -->  é uma especie 

URI vs URL --> URL é um tipo de URI

Deve se referir a um substantivo 
Usar os verbos http de acordo com as convencoes 

4.10. Modelando e requisitando um Collection Resource com GET

4.11. Desafio: collection resource de estados
Muito facil esse desafio aqui 

4.12. Representações de recursos e content negotiation

4.13. Implementando content negotiation para retornar JSON ou XML

produces = MediaType.xxxx

4.14. Consultando Singleton Resource com GET e @PathVariable

@PathVariable

4.15. Customizando as representações XML e JSON com @JsonIgnore, @JsonProperty e @JsonRootName

JsonProperty: nome da propriedade que é retornado
JsonIgnore: atributo nao é devolvido no json 

4.16. Customizando a representação em XML com Wrapper e anotações do Jackson

4.17. Conhecendo os métodos HTTP

Idempotencia

GET - Ele é usado quando e necessario obter um determinado recurso
	  Nao pode ser usado para mudar um recurso
	  
Post - é usado para criar um novo recurso, envia o body no payload
	- Nao é idempotente
	
Put - Forma de determinado recurso 
	- Pode funcionar com um salvar e atualizar 
	
Patch - Serve para atualizar um recurso parcialmente 

Delete - é considerado idempotente

Head - é usado apenas para trazer um cabeçalho

Options

4.18. Conhecendo os códigos de status HTTP

Nivel 200 a 299 
--> Requisiçao bem sucedida 

Nivel 300 - indica status de redirecionamento 

Nivel 400 - Algo errado na chamada do cliente para o servidor

Ou o servidor nao conseguiu processar a mensagem

Nivel 500 - indica erro no servidor

Algum problema do codigo ou dos servidores 


4.19. Definindo o status da resposta HTTP com @ResponseStatus

4.20. Manipulando a resposta HTTP com ResponseEntity

ResponseEntity -> representa uma resposta http, pode ate ter uma instancia do objeto 

4.21. Corrigindo o Status HTTP para resource inexistente

4.22. Status HTTP para collection resource vazia: qual usar?

4.23. Modelando e implementando a inclusão de recursos com POST

@RequestBody - diz que o parametro informado vai receber o Body da requisiçao

4.24. Negociando o media type do payload do POST com Content-Type

4.25. Modelando e imxplementando a atualização de recursos com PUT

PUT --> E considerado um metodo idempotente

Forma de facilitar a copia do objeto
BeanUtil.copyPropertie 

mão é 

4.26. Modelando e implementando a exclusão de recursos com DELETE

O delete é um metodo IDEMPOTENTE

4.27. Implementando a camada de domain services (e a importância da linguagem ubíqua)

DomainService ou Serviço de dominio - é uma operacao sem estado

Linguagem Ubicua - e a mesma linguaguem que é falada pelo time de negocios

4.28. Refatorando a exclusão de cozinhas para usar domain services

Criaçao das classes de exceçao

4.30. Modelando e implementando a inclusão de recursos de restaurantes

4.32. Desafio: implementando serviços REST de cidades e estados

Voltar pra fazer o desafio 

4.33. Analisando solução para atualização parcial de recursos com PATCH
--Atualizaçao parcial 
--> essa aula é muito boa, preciso ver ela novamente

4.34. Finalizando a atualização parcial com a API de Reflections do Spring
Estudar muito mais sobre reflections 
Reflections -->  O que é? Capacidade de inspecionar objetos Java em tempo de execuçao 
Essa aula é mostra 
Classe Object Mapper --> 
CampoField 

4.35. Introdução ao Modelo de Maturidade de Richardson (RMM)
Aqui entra a treta de puristas vs pragmaticos 

4.36. Conhecendo o nível 0 do RMM
--> mais rudimentares 
--> nao é considerado rest 

RPC --> Remote Procedure Invocation,  chamadas de procedimentos remotos 
POX(Plain Old XML) 

nao tem nada a ver se usa json é rest 

4.37. Conhecendo o nível 1 do RMM

4.38. Conhecendo o nível 2 do RMM
 o que indica é o uso dos recursos e a utilizaçao correta dos codigos https 
 mercado em geral já considera o nivel 2 como uma api rest
 
 
 4.39. Conhecendo o nível 3 do RMM
 
 Hateoas
 Hypermedia, como configurar os links
 
 5.1. Implementando consultas JPQL em repositórios
 
 Query Params --> 
 
 5.2. Conhecendo o projeto Spring Data JPA (SDJ)
 
 --> Subprojeto do Spring 
 
 5.3. Criando um repositório com Spring Data JPA (SDJ)
 
 Cria uma implementaçao em tempo de execucao 
 
 5.4. Refatorando o código do projeto para usar o repositório do SDJ
 
 5.5. Desafio: refatorando todos os repositórios para usar SDJ
 Voltar e fazer esse desafio 
 
 5.6. Criando consultas com query methods
 Criar as classes dessa aula
 
 5.7. Usando as keywords para definir critérios de query methods
 Criar as classes dessa aula
 
 5.8. Conhecendo os prefixos de query methods
 
 Todos os prefixos abaixo tem o mesmo funcionamento do findby
 read 
 get 
 query
 stream 
 
5.9 Usando queries JPQL(Java Persistence Query Language.) customizadas com @Query

Anottation @Query() e passa a consulta JPQL 

5.10. Externalizando consultas JPQL para um arquivo XML

5.11. Implementando um repositório SDJ customizado

Jogou o metodo dentro da interface para forçar o erro de compilaçao 

5.12. Implementando uma consulta dinâmica com JPQL

StringUtils.hasLength 

5.13. Implementando uma consulta simples com Criteria API
?Criteria --> ajuda muitos em queries dinamicas 

5.14. Adicionando restrições na cláusula where com Criteria API

5.15. Tornando a consulta com Criteria API com filtros dinâmicos

atribuiçao de parametro dinamica 



5.16. Conhecendo o uso do padrão Specifications (DDD) com SDJ

Specification encapsula uma restriçao e assim se forma uma combinaçoes de restricao 

5.17. Implementando Specifications com SDJ

5.18. Criando uma fábrica de Specifications

Criaçao da classe e dos metodos estaticos com lambda 

5.19. Injetando o próprio repositório na implementação customizada e a anotação @Lazy

--> Referencia Circular; 
@Lazy -> so instancia ela no momento que for preciso;

5.20. Estendendo o JpaRepository para customizar o repositório base
Preciso montar este repositorio
@NoRepository --> nao deve ser levada em conta para instanciaçao do objeto 

6. Explorando mais do JPA e Hibernate 

6.1 

JsonIgnore --> exemplo do relacionamento oneToMany 

6.2. Mapeando relacionamento muitos-para-muitos com @ManyToMany

6.3. Analisando o impacto do relacionamento muitos-para-muitos na REST API

Até que ponto vale a pena colocar tantas coisas no response do payload
Sub Collection 
Tomar bastante cuidado quando é adicionado uma nova propriedade 

6.4. Mapeando classes incorporáveis com @Embedded e @Embeddable

@Embeddable é uma classe incorporavel 
@Embedded --> ela é do tipo incorporado, é uma parte da entidade restaurante 


6.6. Mapeando propriedades com @CreationTimestamp e @UpdateTimestamp

@CreationTimestamp --> anotaçao do Hibernate

6.7. Desafio: mapeando relacionamento muitos-para-um


6.10. Entendendo o Eager Loading

Sempre que for ManyToOne --> utilizar o Eager

Carregamento ancioso, nao precisa estar usando ou nao a propriedade

6.11. Entendendo o Lazy Loading

Many To many

Carregamento preguiçoso ,  so vai acontecer quando é realmente necessario

Carregamento por demanda 

Restornar as consultas paginadas ;

6.12. Alterando a estratégia de fetching para Lazy Loading

fecth = fetchType.Lazy 

Eager --> carregamento ancioso

6.13. Alterando a estratégia de fetching para Eager Loading

6.14. Resolvendo o Problema do N+1 com fetch join na JPQL


7.1. Entendendo o funcionamento de um pool de conexões

O que é?

Grupo de conexoes!!

Estado Idle 

7.2. Conhecendo o Hikari: a solução padrão de pool de conexões no Spring Boot

HikariCP: CP = Connections Pools 

ferramenta para realizar varias chamadas simultaneas 

ab -n 6 -c 2 localhost:8080/restaurantes

7.3. Configurando o pool de conexões do Hikari
--> parametros de configuracao

7.4. Schema generation em produção não é uma boa prática

7.5. Flyway: ferramenta de versionamento de schemas de banco de dados

7.6. Adicionando o Flyway no projeto e criando a primeira migração

A mesma migration executada no ambiente de desenvolvimento será executado em prod 

7.8. Criando migrações complexas com remanejamento de dados

Preciso voltar e ver a esta aula com calma


7.9. Criando migração a partir de DDL gerado por schema generation

7.10. Adicionando dados de testes com callback do Flyway
Refazer essa aula e as ultimas do tema que estao faltando

8.1. Introdução ao tratamento e modelagem de erros

8.3. Lançando exceções do tipo ResponseStatusException
--> Classes de dominio nao podem ter controle dos codigo https;

8.5. Simplificando o código com o uso de @ResponseStatus em exceptions

8.7. Analisando os impactos da refatoração

8.8. Criando a exception NegocioException

8.11. Desafio: lançando exceptions de granularidade fina

8.12. Tratando exceções em nível de controlador com @ExceptionHandler

Tratar exceçoes dentro do proprio controlador 

8.13. Tratando exceções globais com @ExceptionHandler e @ControllerAdvice

8.14. Desafio: implementando exception handler

8.15. Criando um exception handler global com ResponseEntityExceptionHandler


8.16. Customizando o corpo da resposta padrão de ResponseEntityExceptionHandler


8.17. Conhecendo a RFC 7807 (Problem Details for HTTP APIs)

Internet Engineering Task Force(IETF)

Podemos expor os detalhes internos do erro, como a stacktrace?

Beneficios --> Formado unico para descrever os erros das APIs 


8.18. Padronizando o formato de problemas no corpo de respostas com a RFC 7807

Include Non Null 

voltar e fazer essa aula meu bom

8.19. Desafio: usando o formato de problemas no corpo de respostas

8.21. Tratando a exception InvalidFormatException na desserialização

Depedencia org.apache.commons

Preciso criar as entidades especificas para cada classe 

8.22. Habilitando erros na desserialização de propriedades inexistentes ou ignoradas

propriedade --> spring.jackson.deserialization.fail-on-unknow

8.23. Desafio: tratando a PropertyBindingException na desserialização

control + shift + t -> consigo pesquisar as propriedades dos tipos, como exemplo as execeptions

8.24. Lançando exception de desserialização na atualização parcial (PATCH)



8.25. Desafio: tratando exception de parâmetro de URL inválido

8.26. Desafio: tratando a exceção NoHandlerFoundException

nova configuracao no appliccation properties

8.27. Desafio: tratando outras exceções não capturadas

8.28. Estendendo o formato do problema para adicionar novas propriedades
--> Essa aula é legal, mensagem direcionada para o usuario 

9.1. Validação do modelo com Bean Validation

É uma especificao como se fosse o JPA example 

-- Jakarta, bean validation

9.2. Adicionando constraints e validando no controller com @Valid

9.4. Estendendo o Problem Details para adicionar as propriedades com constraints violadas

Binding Result 

9.5. Conhecendo e adicionando mais constraints de validação no modelo

9.6. Validando as associações de uma entidade em cascata


--> por padrao o bean validation nao valida por cascata, a nao ser que seja especificado; 

@Valid, valida todas as propriedades do objeto 

9.7. Agrupando e restringindo constraints que devem ser usadas na validação

Criar grupos de validaçoes --> voltar e fazer essa aula 

@Validated 

9.8. Convertendo grupos de constraints para validação em cascata com @ConvertGroup

Anotacoes convert grupo 

9.9. Desafio: adicionando constraints de validação no modelo

control + shift + o, serve para importar automaticamente as classes no Eclipse 

Voltar depois no desafio 

9.10. Customizando mensagens de validação na anotação da constraint

	@NotBlank(message = "Nome é obrigatorio") --> colocou a mensagem direto na entidade
	
9.11. Customizando e resolvendo mensagens de validação globais em Resource Bundle



9.11. Customizando e resolvendo mensagens de validação globais em Resource Bundle

9.12. Desafio: customizando mensagens de validação



9.13. Resolvendo mensagens de validação com Resource Bundle do Bean Validation
--Hibernate validation --> 

Messages.properties do spring ele acontece depois, dessa forma tem mais prioridade 

9.14. Usando o Resource Bundle do Spring como Resource Bundle do Bean Validation

Juntar os dois arquivos validationMessages + messages.properties

9.15. Criando constraints de validação customizadas usando composição

9.16. Criando constraints de validação customizadas com implementação de ConstraintValidator

9.17. Criando constraints de validação customizadas em nível de classe

--> Validaçoes em nivel de classe 


9.18. Ajustando Exception Handler para adicionar mensagens de validação em nível de classe

Preciso voltar e terminar essas aulas aqui

10.1. Introdução aos Testes de Integração e Testes de APIs

10.2. Preparando o projeto para testes de integração

10.3. Criando e rodando um teste de integração com Spring Boot, JUnit e AssertJ

10.4. Escrevendo bons nomes de testes

10.5. Desafio: escrevendo testes de integração

10.6. Rodando os testes pelo Maven

./mvnw test 

./mvnw clean package --> se o teste falha nao gera o pacote 

10.7. Configurando Maven Failsafe Plugin no projeto

classe deve terminar com o sufixo IT - Integration Test 

./mvnw test

./mvnw verify --> esse comando executa os testes de integraçao 

10.8. Implementando Testes de API com REST Assured e validando o código de status HTTP

10.9. Validando o corpo da resposta HTTP

Matchers --> encontrar regras de correspondencias 

10.10. Criando um método para fazer setup dos testes

Metodos de Callback 

10.11. Entendendo o problema da ordem de execução dos Testes
--> Um teste nao pode depender da execuçao de um outro teste

10.12. Voltando o estado inicial do banco de dados para cada execução de teste com callback do Flyway

Voltar na aula que foi criada o arquivo afterMigrate.sql

10.13. Configurando um banco de testes e usando @TestPropertySource

Criaçao da pasta resources em tests 


10.14. Limpando e populando o banco de dados de teste

Voltar na aula e fazer as coisas 

10.15. Testando endpoint passando parâmetro de URL


10.17. Desafio: escrevendo testes de API

Voltar nesse desafio depois 

11.1. Analisando e definindo melhor o escopo das transações

é uma boa pratica anotar todos os metodos publicos que realizam uma alteraçao no banco de dados 

11.2. Refinando o payload de cadastro com @JsonIgnoreProperties

11.3. Criando classes de mixin para usar as anotações do Jackson

Mixin o que é? 

É uma classe que possui membros de uma outra classe original 

11.4

Fazer esse desafio 

11.5. Antes de estudar sobre data/hora: relembrando as aulas de geografia e entendendo os fusos horários

offset

UTC é um padrao de horario universal, usando relogios atomicos de alta precisao 

11.6. Boas práticas para trabalhar com data e hora em REST APIs

 - 5 leis para trabalhar com datas 
  1) ISO-8601
  2) Aceite qualquer fuso horario 
  3) Armazene em UTC
  4) Retorne em UTC 
  5) Nao inclua o horario, se nao for necessário 
  
11.7. Configurando e refatorando o projeto para usar UTC

Tipo offsetDateTime 

11.8 Desafio 

Voltar e fazer esse desafio

11.9 Isolando o Domain Model do Representation Model com o padrao DTO 

DTO --> Data transfer object 

--> Classes de transferencias de dados 

Quando usar o DTO?

11.10. Implementando a conversão de entidade para DTO

11.11. Criando DTOs para entrada de dados na API

11.12. Refatorando e criando um assembler de DTO

11.13. Desafio: Refatorando e criando um disassembler do DTO

--> Voltar depois e fazer esse desafio

11.14. Adicionando e usando o ModelMapper

O que é ? Faz o mapeamento de objetos e a transformaçao de um modelo para o outro 

11.15. Entendendo a estratégia padrão do ModelMapper para correspondência de propriedades

Possui algumas estrategias de mapper? 

Match --> 

11.16. Customizando o mapeamento de propriedades com ModelMapper

11.17. Mapeando para uma instância destino (e não um tipo) com ModelMapper

11.18. Revisando e ajustando as mensagens de validação com o uso de DTOs

11.19. Estratégias de nomes de propriedades: snake case vs lower camel case

Snack case 

11.20. Desafio: usando DTOs como representation model

flush--> Executa as operaçoes do JPA que estao na fila para serem processadas 

12.1. Modelando sub-recursos para relacionamentos

Sub - Recursos 

12.2. Granularidade de recursos: Chatty vs Chunky APIs

Chatty -- varias chamadas pra incluir algo, como exemplo um novo restaurante

Chunk apis  --> pedaço grande 

Granularidade Fina vs Granularidade Grossa 

Fazer essa aula novamente 

12.3. Modelando conceitos abstratos de negócio e ações não-CRUD como recursos

Fazer essa aula novamente 


12.7. Refatorando serviço de cadastro de restaurante para incluir endereço


13.1. Fazendo projeção de recursos com @JsonView do Jackson

--> MappingJacksonValue é uma classe wrapper 

DTO ou JsonView 

13.2. Limitando os campos retornados pela API com @JsonFilter do Jackson

--> JsonFilter --> filtrar propriedades da classe na serializaçao do Objeto

13.3. Limitando os campos retornados pela API com Squiggly

É uma biblioteca de terceiro 























































































































 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 











































































































 










	


