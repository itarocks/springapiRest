/usr/libexec/java_home -V

/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home

export JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home'

export JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-12.0.2.jdk/Contents/Home'

Setar o java home para o correto sdk man

export JAVA_HOME='/Users/itamarrocha/.sdkman/candidates/java/current'

Maven --> 
POM - Project Object Model 


executar o projeto empacotado-- 

java -jar target/{nome do jar} 

Clean --> 

Limpa os arquivos --> 

caminho projeto 

----------Class Loader
----------> 
O que é injeçao  de dependencia? 

Pq usar --> Baixo acoplamento

---> Inversao de controle 

2.10. Conhecendo o Ioc Container do Spring 
Bean --> objetos gerenciados pelo Container do Spring
2.11. Definindo beans com @Component
@Component

2.13
@Configuration
--> Definiçao de beans

Inicio 30/11/2020

Aulas 

1.1 - Introduçao 

1.3 Por que desenvolver REST APIs?
1.4. Conhecendo o modelo de domínio do projeto do curso

2.1. Por que aprender e usar Spring?
2.2. Conhecendo o ecossistema Spring
     Spring Boot --> Visao opinativa 
     Servelet Container --> Fetch Jar
     
2.3 Spring vs Jakarta 

JEE --> Baseado em especificaçoes 
	Agora gerenciado pelo eclipse foundation
Vendor Lock in --> 

Spring ou JEE? 
--> JEE, injeçao de dependecia --> CDI 

2.4 Conhecendo o spring Boot
	--> Spring nao gera codigo, ele apenas auto configura seus projetos
	
Spring Boot vs Spring MVC?

Boot -> camada de abstraçao para ajudar no desenvolvimento

2.5 Criando um projeto spring Boot com Spring Initializr

2.6. Conhecendo o Maven e o pom.xml de um projeto Spring Boot

Maven --> Ferramenta de gerenciamento de dependencia e build de projetos java

comand + K --> para limpar o terminal no mac

Como gerar o build do projeto? 

./mvnw package

./mvnw clean, limpar os arquivs da pasta target

Pom.xml? 

2.7 Criando um controller com Spring MVC

2.8 Restart mais rapido da aplicaçao com DevTools

2.9. O que é injeção de dependências?

principio de inversao de controle; 

IOC JAVA 

2.10. Conhecendo o IoC Container do Spring

BEAN --> Objetos gerenciados pelos Containers do Spring \

Apliccation Context 

2.11. Definindo beans com @Component

bootstrap --> 

2.12. Injetando dependências (beans Spring)

--> Uma das formas de fazer a injeçao de dependencia é pelo construtor

2.13. Usando @Configuration e @Bean para definir beans

Configuration --> classe NotificacaoConfig
Bean 

2.14. Conhecendo os pontos de injeção e a anotação @Autowired

Ponto de injeçoes 

1) Construtor 

2) Setters

3) No proprio atributo 

Qual usar? O ideal é usar no construtor; no atributo dificulta um pouco os testes 

2.15. Dependência opcional com @Autowired

@Autowired(required = false) 

2.16. Ambiguidade de beans e injeção de lista de beans

2.17. Desambiguação de beans com @Primary

@Primary --> 

2.18. Desambiguação de beans com @Qualifier

@Qualifier("email")

2.19. Desambiguação de beans com anotação customizada


@Retention --> 

2.20. Mudando o comportamento da aplicação com Spring Profiles
-- Uma forma de separar componentes da aplicaçao em diferentes ambientes
--Muito utilizado em ambiente de produçao e desenvolvimento

para passar o profile por linha de comando: 

java -jar projeto.jar -Dspring.profiles.actives=prod // tbem da pra fazer pela propria IDE do eclipse

2.21. Criando métodos de callback do ciclo de vida dos beans 

--> Todos os beans no spring possuem o ciclo de vida 
	1) Inicializaçao
	2) Utilizaçao
	3) Destruiçao
	
Podemos implementar metodos de callback --> sao chamados pelo proprio container quando passam por determinado ciclo de vida acima 

1) Com essa anotation

@PostConstruct

@PreDestroy 

Init
Destroy

2)Da pra fazer tbem pela classe de configuraçao

3) Implementando a interface InitializingBean e DisposableBean

2.22. Publicando e consumindo eventos customizados
Padrao de projeto --> Observer, diminui o acoplamento entre as classes 

ApplicattionEventPublisher 

Vantagens, baixo acoplamento e alta coesao 

2.23. Configurando projetos Spring Boot com o application.properties

Boa pratica, nunca usar hard-coded no código da aplicaçao 


#2.24. Substituindo propriedades via linha de comando e variáveis de ambiente

Como definir variavel de ambiente no MAC

1) export SERVER_PORT=8083
   echo $SERVER_PORT
   
No windows 

set SERVER_PORT= 8082

2.25. Criando e acessando propriedades customizadas com @Value

Classe NotificadorEmail

2.26. Acessando propriedades com @ConfigurationProperties

Forma de organizar as configuracoes de determinados grupos 

@ConfigurationProperties 
Criando a classe de configuraçao 

Classe NotificadorProperties

2.27. Alterando a configuração do projeto dependendo do ambiente (com Spring Profiles)

Properties especificos para cada ambiente 

2.28. Ativando o Spring Profile por linha de comando e variável de ambiente
Implantar no ambiente de produçao 

java -jar {pasta}arquivo.jar --spring.profiles.active=production

3. Introduçao ao JPA e Hibernate 
Persistencia de dados? 
Driver JDBC -> 
O que é o ORM? 

JPQL

3.2. O que é JPA e Hibernate? 
É uma especificaçao - descreve como algo deve funcionar 
Hibernate - é uma implementaçao da especificaçao JPA 

3.3. Adicionando JPA e configurando o Data Source

3.4. Mapeando entidades com JPA

3.5. Criando as tabelas do banco a partir das entidades

3.6. Mapeando o id da entidade para autoincremento

3.7. Importando dados de teste com import.sql

arquivo tem que estar dentro da pasta resource e precisa chamar -> import.sql

3.8. Consultando objetos do banco de dados

3.9. Adicionando um objeto no banco de dados
@Transactional 

3.10. Buscando um objeto pelo id no banco de dados

3.11. Atualizando um objeto no banco de dados


3.12. Excluindo um objeto do banco de dados

3.13. Conhecendo o padrão Aggregate do DDD

Agregatte root --> Ler mais nisso no livro do DDD


3.14. Conhecendo e implementando o padrão Repository -- refazer essa aula

Repositorio orientado a persitencia 

Ele representa uma coleçao 

3.15. Conhecendo e usando o Lombok

Lombok -->  

3.16. Desafio: Lombok e repositório de restaurantes

3.17. Mapeando relacionamento com @ManyToOne
Engine:MyISAM, correto é usar o INODB

3.18. A anotação @JoinColumn

3.19. Propriedade nullable de @Column e @JoinColumn

3.20. Desafio: mapeando entidades
Voltar e fazer o desafio; 
1)Criar a entidade, fazer o mapeamento, criar o repositorio de cada agregate root; 

4.0 Rest com spring 

O que é Rest? 

Representational State Transfer 

Melhores praticas sao chamadas de constraints 

Vantagens = 1.1 Separacao entre o cliente e servidor

4.2. Conhecendo as constraints do REST

. Cliente-Servidor
. Stateless --> sem estado 
. cache --> tipo um proxy 
. interface uniforme 
. Sistema em camadas(Ter outros servidores no meio do caminho) --> nao devem afetar o processamento da requisicao 
. Codigo sob demanda 

4.3. Diferença entre REST e RESTful

Restful API segue todas as constraints 

4.4. Desenvolvedores de REST APIs puristas e pragmáticos

Purista vs pragmaticos 

4.5. Conhecendo o protocolo HTTP

4.6. Usando o protocolo HTTP

4.7. Instalando e testando o Postman

4.8. Entendendo o que são Recursos REST

Recursos do Rest API 


4.9. Identificando recursos REST

Rest usa URI: Uniform Resource Identifier -->  é uma especie 

URI vs URL --> URL é um tipo de URI

Deve se referir a um substantivo 
Usar os verbos http de acordo com as convencoes 

4.10. Modelando e requisitando um Collection Resource com GET

4.11. Desafio: collection resource de estados
Muito facil esse desafio aqui 

4.12. Representações de recursos e content negotiation

4.13. Implementando content negotiation para retornar JSON ou XML

produces = MediaType.xxxx

4.14. Consultando Singleton Resource com GET e @PathVariable

@PathVariable

4.15. Customizando as representações XML e JSON com @JsonIgnore, @JsonProperty e @JsonRootName

JsonProperty: nome da propriedade que é retornado
JsonIgnore: atributo nao é devolvido no json 

4.16. Customizando a representação em XML com Wrapper e anotações do Jackson

4.17. Conhecendo os métodos HTTP

Idempotencia

GET - Ele é usado quando e necessario obter um determinado recurso
	  Nao pode ser usado para mudar um recurso
	  
Post - é usado para criar um novo recurso, envia o body no payload
	- Nao é idempotente
	
Put - Forma de determinado recurso 
	- Pode funcionar com um salvar e atualizar 
	
Patch - Serve para atualizar um recurso parcialmente 

Delete - é considerado idempotente

Head - é usado apenas para trazer um cabeçalho

Options

4.18. Conhecendo os códigos de status HTTP

Nivel 200 a 299 
--> Requisiçao bem sucedida 

Nivel 300 - indica status de redirecionamento 

Nivel 400 - Algo errado na chamada do cliente para o servidor

Ou o servidor nao conseguiu processar a mensagem

Nivel 500 - indica erro no servidor

Algum problema do codigo ou dos servidores 


4.19. Definindo o status da resposta HTTP com @ResponseStatus

4.20. Manipulando a resposta HTTP com ResponseEntity

ResponseEntity -> representa uma resposta http, pode ate ter uma instancia do objeto 

4.21. Corrigindo o Status HTTP para resource inexistente

4.22. Status HTTP para collection resource vazia: qual usar?

4.23. Modelando e implementando a inclusão de recursos com POST

@RequestBody - diz que o parametro informado vai receber o Body da requisiçao

4.24. Negociando o media type do payload do POST com Content-Type

4.25. Modelando e imxplementando a atualização de recursos com PUT

PUT --> E considerado um metodo idempotente

Forma de facilitar a copia do objeto
BeanUtil.copyPropertie 

mão é 

4.26. Modelando e implementando a exclusão de recursos com DELETE

O delete é um metodo IDEMPOTENTE

4.27. Implementando a camada de domain services (e a importância da linguagem ubíqua)

DomainService ou Serviço de dominio - é uma operacao sem estado

Linguagem Ubicua - e a mesma linguaguem que é falada pelo time de negocios

4.28. Refatorando a exclusão de cozinhas para usar domain services

Criaçao das classes de exceçao

4.30. Modelando e implementando a inclusão de recursos de restaurantes

4.32. Desafio: implementando serviços REST de cidades e estados

Voltar pra fazer o desafio 

4.33. Analisando solução para atualização parcial de recursos com PATCH
--Atualizaçao parcial 
--> essa aula é muito boa, preciso ver ela novamente

4.34. Finalizando a atualização parcial com a API de Reflections do Spring
Estudar muito mais sobre reflections 
Reflections -->  O que é? Capacidade de inspecionar objetos Java em tempo de execuçao 
Essa aula é mostra 
Classe Object Mapper --> 
CampoField 

4.35. Introdução ao Modelo de Maturidade de Richardson (RMM)
Aqui entra a treta de puristas vs pragmaticos 

































































































 










	


